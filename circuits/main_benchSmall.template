pragma circom 2.1.0;

include "mod.circom";
include "mul.circom";
include "noise_flooding.circom";

template BenchSmall(l, n, t, q1, q2, q3) {
	// Compute AddPlain(MulPlain(in1, w1), w2), where in1 is a ciphertext (in NTT form), and w1, w2 are plaintext server inputs; no ciphertext maintenance is carried out. 
	var secparam = 128;
	signal input in[2][l][n]; 
	signal input noise[secparam][2][l][n];
	signal input w1[n];
	signal input w2[n];
	signal input b[secparam];
	signal mul[2][l][n];
	signal out[2][l][n];
	signal output flooded[2][l][n];
	
	// Range check for plaintext inputs
	LtConstantN(t, n)(w1);
	LtConstantN(t, n)(w2);
	
	// mul = MulPlain(in, w1)
	var q[l]; 
	assert(0 < l && l <= 3);
	if (l == 1) {q = [q1]; }
	if (l == 2) {q = [q1, q2]; }
	if (l == 3) {q = [q1, q2, q3]; }
	
	for (var i = 0; i < l; i++) {
		// OPTIMIZATION: if t < q[i], there's no need to reduce w modulo q[i] for each CRT component
		assert(t < q[i]); 
		mul[0][i] <== MulPointwise(n, q[i])(in[0][i], w1);
		mul[1][i] <== MulPointwise(n, q[i])(in[1][i], w1);
	}	
	
	// out = AddPlain(mul, w2)
	for (var i = 0; i < l; i++) {
		for (var j = 0; j < n; j++) {
			out[0][i][j] <== parallel FastAddMod(q[i])([mul[0][i][j], w2[j]]);
		}
	}
	out[1] <== mul[1];
	
	flooded <== NoiseFlooding(secparam, 2, l, n, q1, q2, q3)(out, noise, b);
}

component main {public [in, noise]} = BenchSmall(L, N, T, Q1, Q2, Q3);
